<?xml version="1.0"?>
<ruleset name="OnzraCakePHP">
    <description>The ONZRA CakePHP 2.x coding standard.</description>

    <!-- PSR2 -->

    <rule ref="PSR2">
        <!-- CakePHP does not use namespaces. -->
        <exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace"/>
        <!-- Allow App::uses() includes in class files. -->
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols" />
    </rule>

    <!-- Arrays -->

    <!-- No spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- Code Analysis -->

    <!-- No empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement" />
    <!-- Do not reuse outer loop incrementer variable in inner loop -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <!-- Do not use if statement with only the value true or false -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />

    <!-- Commenting -->

    <!-- Proper docblock formatting -->
    <rule ref="Generic.Commenting.DocComment"/>
    <!-- Class comments -->
    <rule ref="OnzraCakePHP2x.Commenting.ClassComment" />
    <!-- Function comments -->
    <rule ref="OnzraCakePHP2x.Commenting.FunctionComment">
        <exclude name="OnzraCakePHP2x.Commenting.FunctionComment.MissingReturn"/>
    </rule>
    <!-- Variable comments -->
    <rule ref="OnzraCakePHP2x.Commenting.VariableComment" />
    <!-- No perl style inline comments -->
    <rule ref="PEAR.Commenting.InlineComment" />
    <!-- Require @throws tag in function comments -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
    <!-- Empty catch clause must have at least a comment -->
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <!-- No post statement comments -->
    <rule ref="Squiz.Commenting.PostStatementComment" />

    <!-- Files -->

    <!-- Files must end with a newline character -->
    <rule ref="Generic.Files.EndFileNewline" />
    <!-- Correct line ending character -->
    <rule ref="Generic.Files.LineEndings" />

    <!-- Formatting -->

    <!-- Multiple statements on one line not allowed -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />
    <!-- No space after cast -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast" />

    <!-- Metrics -->

    <!-- Cyclomatic complexity -->
    <rule ref="Generic.Metrics.CyclomaticComplexity" />
    <!-- Nesting level -->
    <rule ref="Generic.Metrics.NestingLevel" />

    <!-- Naming -->

    <!-- Allow underscored function names, but only in controllers -->
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <exclude-pattern>/Controller/*</exclude-pattern>
    </rule>
    <!-- Upper case constant names -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />

    <!-- Javascript -->

    <!-- Run closure linter -->
    <rule ref="Generic.Debug.ClosureLinter" />
    <!-- Rune JSHint -->
    <rule ref="Generic.Debug.JSHint"/>

    <!-- CSS -->

    <!-- Run CSS linter -->
    <rule ref="Generic.Debug.CSSLint"/>

</ruleset>
